package com.example.service.implementation;import com.example.dto.StudentDto;import com.example.exception.StudentNotFoundException;import com.example.model.Student;import com.example.model.mapper.StudentMapper;import com.example.model.status.ModelStatus;import com.example.repository.StudentRepository;import com.example.service.StudentService;import lombok.RequiredArgsConstructor;import org.springframework.stereotype.Service;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.function.IntConsumer;import java.util.stream.IntStream;/** * Service class for Student entity. * @author Igor A. Zelaya (izelaya22@gmail.com) * @version 1.0.0 */@Service@RequiredArgsConstructorpublic class StudentServiceImpl implements StudentService {	private final StudentRepository studentRepository;	private final StudentMapper studentMapper;	@Override	public void saveStudent(final StudentDto studentDto) {		Student student = Student				.buildFromDto(this.studentMapper.dtoToStudent(studentDto));		this.studentRepository.save(student);	}	@Override	public StudentDto findStudentById(final String studentId) {		Student student = studentRepository.findById(studentId)				.orElseThrow(() -> StudentNotFoundException						.buildStudentNotFoundExceptionForId(studentId));		return studentMapper				.studentToDto(						isActiveStudent(student, "studentId", studentId));	}	@Override	public StudentDto findStudentByName(final String studentName) {		Student student = this.studentRepository.findByStudentName(studentName)				.orElseThrow(() -> StudentNotFoundException						.buildStudentNotFoundExceptionForField("studentName", studentName));		return studentMapper				.studentToDto(						isActiveStudent(student, "studentName", studentName));	}	@Override	public void deleteStudentById(final String studentId){		Student student = studentMapper.dtoToStudent(findStudentById(studentId));		student.setStudentStatus(ModelStatus.INACTIVE);		studentRepository.save(student);	}	/**	 * Return student if status code is ACTIVE.	 * @param student Student	 * @param queryField String	 * @param queryFieldValue String	 * @return Student	 * @throws StudentNotFoundException ex	 */	private Student isActiveStudent(Student student, String queryField, String queryFieldValue){		if(student.getStudentStatus().getStatusCode() == 0){			return student;		}		throw StudentNotFoundException				.buildStudentNotFoundExceptionForField(queryField, queryFieldValue);	}}