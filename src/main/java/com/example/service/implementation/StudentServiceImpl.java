package com.example.service.implementation;import com.example.dto.StudentDto;import com.example.exception.StudentNotFoundException;import com.example.model.Student;import com.example.model.mapper.StudentMapper;import com.example.repository.StudentRepository;import com.example.service.StudentService;import lombok.RequiredArgsConstructor;import org.springframework.stereotype.Service;/** * Service class for Student entity. * @author Igor A. Zelaya (izelaya22@gmail.com) * @version 1.0.0 */@Service@RequiredArgsConstructorpublic class StudentServiceImpl implements StudentService {	private StudentRepository studentRepository;	private StudentMapper studentMapper;	@Override	public void saveStudent(StudentDto studentDto) {		Student student = Student.buildFromDto(this.studentMapper.dtoToStudent(studentDto));		this.studentRepository.save(student);	}	@Override	public Student findStudentById(String studentId) {		return studentRepository.findById(studentId)								.orElseThrow(() -> StudentNotFoundException												.buildStudentNotFoundExceptionForField("id", studentId));	}	@Override	public Student findStudentByName(String studentName) {		return studentRepository.findByStudentName(studentName)				.orElseThrow(() ->  StudentNotFoundException						.buildStudentNotFoundExceptionForField("name", studentName));	}	@Override	public void deleteStudentById(String studentId){		if(studentExists(studentId)){			studentRepository.deleteById(studentId);			return;		}		throw StudentNotFoundException.buildStudentNotFoundExceptionForField("id", studentId);	}	/**	 * Validates if student exists by its ID.	 * @param studentId String	 * @return true or false	 */	private boolean studentExists(String studentId) {		return studentRepository.existsById(studentId);	}}